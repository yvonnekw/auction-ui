/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { ProductResponse } from '../../models/product-response';

export interface GetAllProducts$Params {
}

export function getAllProducts(http: HttpClient, rootUrl: string, params?: GetAllProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProductResponse>>> {
  const rb = new RequestBuilder(rootUrl, getAllProducts.PATH, 'get');
  if (params) {
  }

  return http.request(
     rb.build({ responseType: 'blob', accept: '*/*', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<Array<ProductResponse>>;
    })
  );
}

getAllProducts.PATH = '/api/v1/products/get-all-products';


/*
import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map, switchMap } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';
import { ProductResponse } from '../../models/product-response';

export interface GetAllProducts$Params {}

export function getAllProducts(
  http: HttpClient,
  rootUrl: string,
  params?: GetAllProducts$Params,
  context?: HttpContext
): Observable<StrictHttpResponse<ProductResponse[]>> {
  const rb = new RequestBuilder(rootUrl, getAllProducts.PATH, 'get');

  return http.request(
    rb.build({ responseType: 'blob', accept: '*//*', context })
  ).pipe(
    filter((r: any): r is HttpResponse<Blob> => r instanceof HttpResponse),
    switchMap((response: HttpResponse<Blob>) => {
      // Use 'response.body' to convert Blob to JSON
      return blobToJson(response.body).pipe(
        map((jsonArray: ProductResponse[]) => {
          // Create a StrictHttpResponse from the parsed JSON
          const strictResponse: StrictHttpResponse<ProductResponse[]> = {
            body: jsonArray,
            headers: response.headers,
            status: response.status,
            statusText: response.statusText,
            url: response.url,
            type: response.type, // Include the 'type' property
            ok: response.ok,     // Include the 'ok' property
            clone: () => response.clone(), // Implement the 'clone' method
          };
          return strictResponse; // Return the StrictHttpResponse
        })
      );
    })
  );
}

getAllProducts.PATH = '/api/v1/products/get-all-products';

// Helper function to convert Blob to JSON
function blobToJson(blob: Blob | null): Observable<ProductResponse[]> {
  return new Observable<ProductResponse[]>(observer => {
    if (!blob) {
      observer.error('No blob received for conversion.');
      return;
    }

    const reader = new FileReader();
    reader.onload = (event) => {
      if (event.target) {
        try {
          const json = JSON.parse(event.target.result as string);
          observer.next(json);
          observer.complete();
        } catch (error) {
          observer.error('Failed to parse JSON from Blob: ' + error);
        }
      } else {
        observer.error('FileReader event target is null.');
      }
    };
    reader.onerror = (error) => {
      observer.error('Error reading Blob: ' + error);
    };

    reader.readAsText(blob);
  });
}


*/




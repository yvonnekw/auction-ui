/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import {HttpClient, HttpContext, HttpResponse} from '@angular/common/http';
import { Injectable } from '@angular/core';
import {Observable, tap} from 'rxjs';
import { map } from 'rxjs/operators';
import { switchMap } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';
import {catchError } from 'rxjs/operators';
import { of } from 'rxjs';

import { buyNow } from '../fn/product-controller/buy-now';
import { BuyNow$Params } from '../fn/product-controller/buy-now';
import { createProduct } from '../fn/product-controller/create-product';
import { CreateProduct$Params } from '../fn/product-controller/create-product';
import { findByProductId } from '../fn/product-controller/find-by-product-id';
import { FindByProductId$Params } from '../fn/product-controller/find-by-product-id';
import { getAllProducts } from '../fn/product-controller/get-all-products';
import { GetAllProducts$Params } from '../fn/product-controller/get-all-products';
import { getProduct } from '../fn/product-controller/get-product';
import { GetProduct$Params } from '../fn/product-controller/get-product';
import { ProductResponse } from '../models/product-response';

@Injectable({ providedIn: 'root' })
export class ProductControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createProduct()` */
  static readonly CreateProductPath = '/api/v1/products/create-product';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createProduct()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createProduct$Response(params: CreateProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return createProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createProduct$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createProduct(params: CreateProduct$Params, context?: HttpContext): Observable<number> {
    return this.createProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `buyNow()` */
  static readonly BuyNowPath = '/api/v1/products/buy-now';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `buyNow()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  buyNow$Response(params: BuyNow$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductResponse>> {
    return buyNow(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `buyNow$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  buyNow(params: BuyNow$Params, context?: HttpContext): Observable<ProductResponse> {
    return this.buyNow$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductResponse>): ProductResponse => r.body)
    );
  }

  /** Path part for operation `getProduct()` */
  static readonly GetProductPath = '/api/v1/products';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProduct()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProduct$Response(params?: GetProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProduct$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProduct(params?: GetProduct$Params, context?: HttpContext): Observable<string> {
    return this.getProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `findByProductId()` */
  static readonly FindByProductIdPath = '/api/v1/products/{productId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByProductId()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByProductId$Response(params: FindByProductId$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductResponse>> {
    return findByProductId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByProductId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByProductId(params: FindByProductId$Params, context?: HttpContext): Observable<ProductResponse> {
    return this.findByProductId$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductResponse>): ProductResponse => r.body)
    );
  }

  /** Path part for operation `getAllProducts()` */
  static readonly GetAllProductsPath = '/api/v1/products/get-all-products';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllProducts()` instead.
   *
   * This method doesn't expect any request body.
   */
  /*
  getAllProducts$Response(params?: GetAllProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProductResponse>>> {
    return getAllProducts(this.http, this.rootUrl, params, context);
  }
*/



  // Update the getAllProducts$Response method
  getAllProducts$Response(params?: GetAllProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductResponse[]>> {
    return this.http.get<ProductResponse[]>(this.config.rootUrl + ProductControllerService.GetAllProductsPath, {
      observe: 'response', // This allows you to get the full HTTP response
      responseType: 'json', // Assuming the API responds with JSON
      context: context
    }).pipe(
      map((response: HttpResponse<ProductResponse[]>) => {
        // Create a StrictHttpResponse from the HttpResponse
        return {
          body: response.body || [], // Default to an empty array if body is null
          headers: response.headers,
          status: response.status,
          statusText: response.statusText,
          url: response.url,
          type: response.type,
          ok: response.ok,
          clone: () => response.clone(),
        } as StrictHttpResponse<ProductResponse[]>; // Type assertion
      })
    );
  }

/*

private blobToJson(blob: Blob | null): Observable<ProductResponse[]> {
  return new Observable<ProductResponse[]>(observer => {
    if (!blob) {
      observer.error('Received null blob.');
      return;
    }

    const reader = new FileReader();
    reader.onload = (event) => {
      if (event.target) {
        try {
          const json = JSON.parse(event.target.result as string);
          observer.next(json as ProductResponse[]);
          observer.complete();
        } catch (error) {
          observer.error('Failed to parse JSON from Blob: ' + error);
        }
      } else {
        observer.error('FileReader event target is null.');
      }
    };
    reader.onerror = (error) => {
      observer.error('Error reading Blob: ' + error);
    };

    reader.readAsText(blob);
  });
}

*/
/**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllProducts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  /*
  getAllProducts(params?: GetAllProducts$Params, context?: HttpContext): Observable<Array<ProductResponse>> {
    return this.getAllProducts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProductResponse>>): Array<ProductResponse> => r.body)
    );
  }*/
/*
  getAllProducts(params?: GetAllProducts$Params, context?: HttpContext): Observable<Array<ProductResponse>> {
    return this.getAllProducts$Response(params, context).pipe(
      tap((response: StrictHttpResponse<Array<ProductResponse>>) => {
        console.log('Response:', response);
      }),
      map((r: StrictHttpResponse<Array<ProductResponse>>): Array<ProductResponse> => r.body)
    );
  }
*/
  getAllProducts(params?: GetAllProducts$Params, context?: HttpContext): Observable<ProductResponse[]> {
    return this.getAllProducts$Response(params, context).pipe(
      tap((response: StrictHttpResponse<ProductResponse[]>) => {
        console.log('Response:', response);
      }),
      map((response: StrictHttpResponse<ProductResponse[]>) => {
        return response.body; // Return the body directly, which is of type ProductResponse[]
      }),
      catchError((error) => {
        console.error('Error fetching products:', error);
        return of([]); // Return an empty array on error
      })
    );
  }

}
